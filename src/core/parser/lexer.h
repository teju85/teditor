#pragma once

#include <stdint.h>
#include <core/pos2d.h>
#include <vector>

namespace teditor {
namespace parser {

/** Represents a token that is being generated by the Lexer */
struct Token {
  /**
   * token type. Custom parsers are free to define their own types for their
   * internal use. But from an interface perspective, it'll always be an integer
   * for faster lookup.
   */
  uint32_t type;
  /** start of this token in the input stream */
  Pos2ds start;
  /** end of this token in the input stream */
  Pos2ds end;

  /** special reserved token for denoting EOF */
  static const size_t EOF;
};  // struct Token

/** Represents a node in the parse tree */
struct Node {
  /** current node contents */
  Token token;

  bool isEof() const { return token.type == Token::EOF; }
  bool isLeaf() const { return childIds.empty(); }
  size_t size() const { return childIds.size(); }
  size_t operator[](size_t idx) { return childIds[idx]; }
  void addChild(size_t childId) { childIds.push_back(childId); }

private:
  std::vector<size_t> childIds;
};  // struct Node

}  // namespace parser
}  // namespace teditor
